{"version":3,"sources":["utils/fetchClient.ts","Context/PostsContext.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","PostsContext","createContext","posts","loader","users","comments","selectedUserId","handleClickOnUsers","isActive","setIsActive","error","handleClickOpenComments","isOpenPost","chosenPost","loadingPost","postError","handleDeleteComment","isWriteComment","setIsWriteComment","AddComment","loadAdd","PostsContextProvider","children","useState","setPosts","setLoader","setUsers","setComments","setSelectedUserId","setError","setChosenPost","setIsOpenPost","setLoadingPost","setPostError","changes","setChanges","setLoadAdd","useEffect","loadData","a","filter","post","userId","Error","comment","postId","useCallback","id","newComment","Provider","value","usePostsContext","useContext","PostsList","showPost","find","className","map","title","type","onClick","Loader","NewCommentForm","author","setAuthor","authorEmail","setAuthorEmail","text","setText","isAuthor","setIsAuthor","isEmail","setIsEmail","isText","setIsText","onSubmit","event","preventDefault","name","email","htmlFor","placeholder","classNames","onChange","target","trim","PostDetails","isCommets","length","postTitle","postBody","filteredCommit","href","handleDelete","UserSelector","selectedUser","user","role","App","isEmptyPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fcbbc96a.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import {\n  ReactNode, createContext, useCallback, useContext, useEffect, useState,\n} from 'react';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\nimport { Comment } from '../types/Comment';\n\ninterface PostsContextInterface {\n  posts: Post[] | null;\n  users: User[];\n  loader: boolean;\n  comments: Comment[];\n  selectedUserId: number;\n  handleClickOnUsers: (id: number) => void;\n  isActive: boolean;\n  setIsActive: (active: boolean) => void;\n  error: boolean;\n  handleClickOpenComments: (id: number) => void;\n  isOpenPost: boolean;\n  chosenPost: number,\n  loadingPost: boolean,\n  postError: boolean,\n  handleDeleteComment: (id: number) => void;\n  isWriteComment: boolean;\n  setIsWriteComment: (isWriteComment: boolean) => void;\n  AddComment: (newComment: {}) => void;\n  loadAdd: boolean;\n}\n\nconst PostsContext = createContext<PostsContextInterface>({\n  posts: [],\n  loader: false,\n  users: [],\n  comments: [],\n  selectedUserId: 0,\n  handleClickOnUsers: () => { },\n  isActive: false,\n  setIsActive: () => { },\n  error: false,\n  handleClickOpenComments: () => { },\n  isOpenPost: false,\n  chosenPost: 0,\n  loadingPost: false,\n  postError: false,\n  handleDeleteComment: () => { },\n  isWriteComment: false,\n  setIsWriteComment: () => { },\n  AddComment: () => { },\n  loadAdd: false,\n});\n\nexport const PostsContextProvider = ({ children }: { children: ReactNode }) => {\n  const [isWriteComment, setIsWriteComment] = useState(false);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [loader, setLoader] = useState(false);\n  const [users, setUsers] = useState<User[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [error, setError] = useState(false);\n  const [chosenPost, setChosenPost] = useState(0);\n  const [isOpenPost, setIsOpenPost] = useState(false);\n  const [loadingPost, setLoadingPost] = useState(false);\n  const [postError, setPostError] = useState(false);\n  const [changes, setChanges] = useState(false);\n  const [loadAdd, setLoadAdd] = useState(false);\n\n  useEffect(() => {\n    const url = '/posts';\n\n    setLoader(true);\n    const loadData = async () => {\n      try {\n        const data = await client.get<Post[]>(url);\n\n        setPosts(data.filter(post => post.userId === selectedUserId));\n      } catch {\n        setError(true);\n        throw new Error('ERROR!');\n      } finally {\n        setLoader(false);\n      }\n    };\n\n    loadData();\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    const url = '/users';\n\n    const loadData = async () => {\n      try {\n        const data = await client.get<User[]>(url);\n\n        setUsers(data);\n      } catch {\n        throw new Error('ERROR!');\n      }\n    };\n\n    loadData();\n  }, [users]);\n\n  useEffect(() => {\n    const url = '/comments';\n\n    setLoadingPost(true);\n    const loadData = async () => {\n      try {\n        const data = await client.get<Comment[]>(url);\n\n        setComments(data.filter(comment => comment.postId === chosenPost));\n      } catch {\n        setPostError(false);\n        throw new Error('ERROR!');\n      } finally {\n        setLoadingPost(false);\n      }\n    };\n\n    loadData();\n  }, [chosenPost, changes]);\n\n  const handleClickOpenComments = useCallback((id: number) => {\n    setChosenPost(id);\n    setIsOpenPost(true);\n    if (chosenPost === id) {\n      setIsOpenPost(!isOpenPost);\n    }\n\n    setIsWriteComment(!setIsWriteComment);\n  }, [chosenPost, isOpenPost, isWriteComment, posts, users, comments]);\n\n  const handleClickOnUsers = useCallback((id: number) => {\n    setChanges(!changes);\n    setSelectedUserId(id);\n    setIsActive(!isActive);\n    setIsOpenPost(false);\n  }, [posts, isActive, selectedUserId, changes, isOpenPost]);\n\n  const handleDeleteComment = useCallback(async (id: number) => {\n    const url = `/comments/${id}`;\n\n    try {\n      await client.delete(url);\n    } catch {\n      throw Error('Cannot delete comment');\n    } finally {\n      setChanges(!changes);\n    }\n  }, [posts, changes, chosenPost, isOpenPost, isWriteComment, users, comments]);\n\n  const AddComment = async (newComment: {}) => {\n    setLoadAdd(true);\n    const url = '/comments/';\n\n    try {\n      await client.post(url, newComment);\n    } catch {\n      throw Error('Cannot add comment');\n    } finally {\n      setChanges(!changes);\n      setLoadAdd(false);\n    }\n  };\n\n  return (\n    <PostsContext.Provider value={{\n      AddComment,\n      loadAdd,\n      posts,\n      users,\n      comments,\n      loader,\n      selectedUserId,\n      handleClickOnUsers,\n      isActive,\n      setIsActive,\n      error,\n      handleClickOpenComments,\n      isOpenPost,\n      chosenPost,\n      loadingPost,\n      postError,\n      handleDeleteComment,\n      isWriteComment,\n      setIsWriteComment,\n    }}\n    >\n      {children}\n    </PostsContext.Provider>\n  );\n};\n\nexport const usePostsContext = () => useContext(PostsContext);\n","import React from 'react';\nimport { usePostsContext } from '../Context/PostsContext';\n\nexport const PostsList: React.FC = () => {\n  const {\n    posts, handleClickOpenComments, chosenPost, isOpenPost,\n  } = usePostsContext();\n\n  const showPost = posts?.find(post => post.id === chosenPost) || null;\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts?.map(post => {\n            const {\n              title, id,\n            } = post;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={showPost?.id === id && isOpenPost\n                      ? 'button is-link' : 'button is-link is-light'}\n                    onClick={() => handleClickOpenComments(id)}\n                  >\n                    {isOpenPost && showPost?.id === id ? 'Close' : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { FormEvent, useState } from 'react';\nimport classNames from 'classnames';\nimport { usePostsContext } from '../Context/PostsContext';\n\nexport const NewCommentForm: React.FC = () => {\n  const [author, setAuthor] = useState('');\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [text, setText] = useState('');\n  const [isAuthor, setIsAuthor] = useState(true);\n  const [isEmail, setIsEmail] = useState(true);\n  const [isText, setIsText] = useState(true);\n\n  const handleClear = () => {\n    setAuthor('');\n    setAuthorEmail('');\n    setText('');\n  };\n\n  const { AddComment, chosenPost, loadAdd } = usePostsContext();\n\n  const handleSubmitAdd = (event: FormEvent) => {\n    event.preventDefault();\n    if (!author) {\n      setIsAuthor(false);\n    }\n\n    if (!authorEmail) {\n      setIsEmail(false);\n    }\n\n    if (!text) {\n      setIsText(false);\n    }\n\n    if (author) {\n      setIsAuthor(true);\n    }\n\n    if (authorEmail) {\n      setIsEmail(true);\n    }\n\n    if (text) {\n      setIsText(true);\n    }\n\n    if (isAuthor && isEmail && isText && text !== '') {\n      const newCommment = {\n        postId: chosenPost,\n        name: author,\n        email: authorEmail,\n        body: text,\n      };\n\n      AddComment(newCommment);\n    }\n\n    setText('');\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmitAdd}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': !isAuthor })}\n            value={author}\n            onChange={(event) => setAuthor(event.target.value.trim())}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!isAuthor && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!isAuthor && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': !isEmail })}\n            value={authorEmail}\n            onChange={(event) => setAuthorEmail(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {!isEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!isEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': !isText })}\n            value={text}\n            onChange={(event) => setText(event.target.value)}\n          />\n        </div>\n\n        {!isText && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', { 'is-loading': loadAdd })}\n\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { usePostsContext } from '../Context/PostsContext';\n\nexport const PostDetails: React.FC = () => {\n  const {\n    loadingPost, postError, comments, chosenPost, posts,\n    handleDeleteComment, isWriteComment, setIsWriteComment,\n  } = usePostsContext();\n  const isCommets = !comments.length;\n  const postTitle = posts?.filter(post => post.id === chosenPost)\n    .find(post => post.title);\n  const postBody = posts?.filter(post => post.id === chosenPost)\n    .find(post => post.body);\n\n  let filteredCommit = comments;\n\n  const handleDelete = (id: number) => {\n    handleDeleteComment(id);\n    filteredCommit = filteredCommit.filter(comment => comment.id !== id);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${chosenPost}: ${postTitle?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {postBody?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {loadingPost && <Loader />}\n\n          {postError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {isCommets && !loadingPost && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n          {!isCommets && !loadingPost && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {filteredCommit.map(comment => {\n                const {\n                  email, name, body, id,\n                } = comment;\n\n                return (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={id}\n                  >\n                    <div className=\"message-header\">\n                      <a\n                        href={`mailto:${email}`}\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => handleDelete(id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {body}\n                    </div>\n                  </article>\n                );\n              })}\n            </>\n          )}\n\n          {!isWriteComment && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsWriteComment(!isWriteComment)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isWriteComment && <NewCommentForm />}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { usePostsContext } from '../Context/PostsContext';\n\nexport const UserSelector: React.FC = () => {\n  const {\n    users, handleClickOnUsers, selectedUserId, isActive, setIsActive,\n  } = usePostsContext();\n  const selectedUser = users.find(user => user.id === selectedUserId);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isActive })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActive(!isActive)}\n        >\n          <span>\n            {!selectedUserId\n              ? 'Choose a user'\n              : selectedUser?.name}\n\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => {\n            const { id, name } = user;\n\n            return (\n              <a\n                key={id}\n                href={`#user-${id}`}\n                className={classNames('dropdown-item',\n                  { 'is-active': selectedUserId === id })}\n                onClick={() => handleClickOnUsers(id)}\n              >\n                {name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { usePostsContext } from './Context/PostsContext';\n\nexport const App: React.FC = () => {\n  const {\n    loader, selectedUserId, posts, error, isOpenPost,\n  } = usePostsContext();\n  const isEmptyPosts = posts?.length === 0;\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {loader && <Loader />}\n\n                {error && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!isEmptyPosts && <PostsList />}\n                {isEmptyPosts && !loader && !!selectedUserId && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {isOpenPost && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { PostsContextProvider } from './Context/PostsContext';\n\nReactDOM.render(\n  <PostsContextProvider>\n    <App />\n  </PostsContextProvider>,\n\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}